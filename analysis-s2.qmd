---
title: "Analysis"
author: "Caroline Simpson"
format: 
  html:
    theme: cerulean
    df-print: kable
    code-fold: false
    toc: true
    toc-float:
      collapsed: true
      smooth-scroll: false
    toc-depth: 7

editor: visual
---

```{r include=FALSE}
#| label: setup

library(knitr)
library(kableExtra)

# library(rstatix)
library(tidyverse)
# library(forcats)
# 
# library(haven)
# library(jtools)
# library(forcats)
# library(FactoMineR)
# library(psych)
# library(interactions)
# library(corrplot)
# library(rcartocolor)
# library(ggpubr)
# library(apaTables)
# library(FSA)
# 
# library(performance)
# library(see)


source("./scripts/data-loading.R", local = TRUE)
source("./scripts/data-cleaning.R", local = TRUE)
source("./scripts/analysis-data-properties.R", local = TRUE)
source("./scripts/analysis-descriptives.R", local = TRUE)
source("./scripts/analysis-reliability.R", local = TRUE)
source("./scripts/analysis-inferential.R", local = TRUE)
source("./scripts/analysis-chat-logs.R", local = TRUE)
source("./scripts/plotting.R", local = TRUE)
source("./scripts/common.R", local = TRUE)
# source("./helpers.R", local = TRUE)


directory_setup()

theme_set(my_theme)

```

# Trusting the machine: Epistemic trust and anthropomorphism in generative artificial intelligence

**Research Question**: What effect does anthropomorphism have on level of trust in generative AI and the content it creates?

My **hypothesis** is that there will be an increase in epistemic trust with increasing levels of anthropomorphism.

## Highlights

## Next Steps

## Data Analysis

### Load data

```{r}
#| label: load-data

s2_raw_data <- load_data("s2")

s2_raw_data <- factorize_data("s2", s2_raw_data)


```

Number of participants in raw data = `r nrow(s2_raw_data)`.

```{r}
#| label: explode-chatbots-used

s2_raw_data <- explode_chatbots_used(s2_raw_data)

```

### Exclude non-consent

```{r}

s2_raw_data <- exclude_non_consenting_participants(s2_raw_data)

```

### Manual Processing

Reviewed and coded Survey purpose check (what they think this study is about, not the attention check)

-   Manually coded the response values with the following key:

    -   0 = no answer provided

    -   1 = identified the survey was about AI content, perception of AI, human versus AI distinction

    -   2 = nonsensical text

    -   3 = values that describe a purpose (not about AI)

    -   4 = random word

    -   5 = unsure

    -   6 = "the study was interesting" or "good" and variations of this

    -   7 = None

    -   8 = paying attention

```{r}
#| label: participant-survey-topic-check

s2_raw_data |> 
  summarize_columns(SurveyTopicCheck_coded) 
```

Reviewed and coded Unrealistic parts of survey.

-   Unrealistic field is a separate field with the values of:

    -   1 = No

    -   2 = Yes

-   Unrealistic_coded -\> Manually coded the response values from Unrealistic_2_TEXT field with the following key:

    -   0 = no answer provided

    -   1 = didn't believe content written by the AI

    -   2 = don't believe that traits make sense to apply to AI

    -   3 = it all seemed realistic

    -   4 = description of AI was not believable

    -   5 = random text

    -   6 = unsure why they were asked questions about AI (in High condition)

    -   7 = Identified didn't follow instructions

    -   8 = Confusion with sliders

    -   9 = The chat (Chatbot was too fast, Chatbot wouldn't talk about other topics, Question why they would talk to an author)

    -   10 = Didn't understand the blog post

    -   11 = other (subconscious bias introduced)

    -   12 = predisposed to distrust information in experiments

    -   13 =

    -   14 = Quality or content of the article (no citations, etc)

```{r}

s2_raw_data |> 
  summarize_columns(Unrealistic) 

s2_raw_data |> 
  summarize_columns(Unrealistic, Unrealistic_coded) 
```


### Clean Data

#### Validate no duplicate participants

```{r}
duplicates <- s2_raw_data |> count_duplicate_participants()

```

There are `r if (duplicates == 0) "no duplicate participants" else paste (duplicates, "duplicates")`

```{r clean_remove_duplicates}
s2_deduped_data <- s2_raw_data |> deduplicate_participants()
duplicates <- s2_deduped_data |> count_duplicate_participants()
```

There are `r if (duplicates == 0) "no duplicate participants" else paste (duplicates, "duplicates")`after removing duplicates.


```{r}
recruited_participants <- s2_deduped_data |> count_recruited_participants("s2")

```

Number of participants recruited = `r recruited_participants`.

```{r}
s2_cleaned_data <- s2_deduped_data |> clean_data("s2")
```

Number of participants after exclusions = `r nrow(s2_cleaned_data)`.


### Fill missing values

#### Assess skewness and distribution

```{r}
s2_cleaned_data |> check_skewness("s2")

s2_cleaned_data |>
  select(-Progress, -ConsentForm, -`Duration (in seconds)`, -Status, -Finished, -TopicCheck, -GodspeedMETI_28, -GodspeedMETI_29, -AIChatbotsUsed_NA) |> 
  check_normality("s2")

```

#### Fill missing values with median values

Populate missing values with the median within Condition.

```{r}

missing_values_within_conditions(s2_cleaned_data)

# Perform imputation only on selected variables
s2_imputed_data <- impute_data(s2_cleaned_data)

missing_values_within_conditions(s2_imputed_data)

```

### Reverse Coding

Reverse code items for each scale where appropriate

```{r}

s2_recoded_data <- s2_imputed_data |> recode_data("s2")

```

#### Standardize Scale Item Values

```{r}


s2_cleaned_data <- s2_recoded_data |> standardize_data()


```

#### Regroup data

Regroup the AIChatbotsFrequency, Education, and Age columns into smaller number of categories of data for analysis. Some of the more granular categories don't have a large enough sample for meaningful comparisons.

```{r}

s2_cleaned_data <- s2_cleaned_data |> regroup_data()                                  
```

### Calculate Scale Scores

#### Define Score Components

```{r}

s2_cleaned_data <- s2_cleaned_data |> compute_scores("s2")

```


### Scale Inter-item Reliability Analysis

#### Anthropomorphism (Godspeed Subscale)

```{r}

basic_descriptives(s2_cleaned_data$anthropomorphism_score)

s2_cleaned_data |> cronbachs_alpha(get_anthropomorphism_score_godspeed_cols())

```

#### Likeability (Godspeed Subscale)

```{r}

basic_descriptives(s2_cleaned_data$likeability_score)

s2_cleaned_data |> cronbachs_alpha(get_likeability_score_godspeed_cols())

```

#### Competence (Godspeed Subscale)

```{r}

basic_descriptives(s2_cleaned_data$competence_score)

s2_cleaned_data |> cronbachs_alpha(get_competence_score_godspeed_cols())

```

#### Expertise (METI Subscale)

```{r}

basic_descriptives(s2_cleaned_data$expertise_score)

s2_cleaned_data |> cronbachs_alpha(get_expertise_score_METI_cols())

```

#### Integrity (METI Subscale)

```{r}

basic_descriptives(s2_cleaned_data$integrity_score)

s2_cleaned_data |> cronbachs_alpha(get_integrity_score_METI_cols())


```

#### Benevolence (METI Subscale)

```{r}
basic_descriptives(s2_cleaned_data$benevolence_score)

s2_cleaned_data |> cronbachs_alpha(get_benevolence_score_METI_cols())

```

#### METI (Author Trust)

```{r}

basic_descriptives(s2_cleaned_data$author_trust_METI_score)

s2_cleaned_data |> cronbachs_alpha(get_author_trust_score_METI_cols())

```

#### Trust Behaviour (Author Trust)

```{r}
basic_descriptives(s2_cleaned_data$author_trust_behaviour_score)

s2_cleaned_data |> cronbachs_alpha(get_author_trust_score_behaviour_cols("s2"))

```

#### Combine Author Trust

```{r}

basic_descriptives(s2_cleaned_data$author_trust_combined_score)

s2_cleaned_data |> cronbachs_alpha(get_author_trust_score_combined_cols("s2"))


```

#### Appelman (Content Trust)

```{r}
basic_descriptives(s2_cleaned_data$content_trust_appelman_score)

s2_cleaned_data |> cronbachs_alpha(get_content_trust_score_appelman_cols())

```

#### Trust Behaviour (Content Trust)

```{r}
basic_descriptives(s2_cleaned_data$content_trust_behaviour_score)

s2_cleaned_data |> cronbachs_alpha(get_content_trust_score_behaviour_cols())

```

#### Combined Content Trust

```{r}

basic_descriptives(s2_cleaned_data$content_trust_combined_score)

s2_cleaned_data |> cronbachs_alpha(get_content_trust_score_combined_cols())

```

#### Expertise / Intentions

```{r}
basic_descriptives(s2_cleaned_data$intention_to_use_score)
s2_cleaned_data |> cronbachs_alpha(get_intention_cols())


basic_descriptives(s2_cleaned_data$fear_of_ai_score)
s2_cleaned_data |> cronbachs_alpha(get_fear_cols())


basic_descriptives(s2_cleaned_data$professional_content_expertise)
s2_cleaned_data |> cronbachs_alpha(get_participant_expertise_cols())

```

### Sample Characteristics

```         
N=`r length(unique(s2_cleaned_data$ResponseId))`
```

#### Study duration (in minutes)

```{r}
basic_descriptives(s2_cleaned_data$`Duration (in seconds)` / 60)
```

#### Participants reporting Technical Issues (Not removed in data cleaning)

```{r}
s2_cleaned_data |> 
  summarize_columns(TechnicalIssues) 

```

```{r}
s2_cleaned_data |> 
  summarize_columns(Unrealistic_coded) 
```

#### Participants per condition.

```{r}
s2_cleaned_data |> 
  summarize_columns(Condition)

```

#### Age

```         
Age range: `r round(min(s2_cleaned_data$Age_1, na.rm = TRUE), 2)` to `r round(max(s2_cleaned_data$Age_1, na.rm = TRUE), 2)`
Mean age: `r round(mean(s2_cleaned_data$Age_1, na.rm = TRUE), 2)`
Standard deviation: `r round(sd(s2_cleaned_data$Age_1, na.rm = TRUE), 2)`
```

```{r}
s2_cleaned_data |> 
  summarize_columns(age_range)

s2_cleaned_data |> 
  summarize_columns(age_range, Condition) 
```

#### Gender

```{r}

s2_cleaned_data |> 
  summarize_columns(Gender) 

s2_cleaned_data |> 
  summarize_columns(Gender, Condition) 

```

#### Sex

```{r}

s2_cleaned_data |> 
  summarize_columns(Sex)

s2_cleaned_data |> 
  summarize_columns(Sex, Condition)
```

#### Education Level

```{r}

s2_cleaned_data |> 
  summarize_columns(Education) 

s2_cleaned_data |> 
  summarize_columns(Education, Condition) 

s2_cleaned_data |> 
  summarize_columns(Education_regrouped) 

s2_cleaned_data |> 
  summarize_columns(Education_regrouped, Condition) 

```

#### AI Chatbot Usage

```{r}

s2_cleaned_data |> 
  summarize_columns(AIChatbotsFrequency) 

s2_cleaned_data |> 
  summarize_columns(AIChatbotsFrequency, Condition) 

s2_cleaned_data |> 
  summarize_columns(AIChatbotsFrequency_regrouped) 

s2_cleaned_data |> 
  summarize_columns(AIChatbotsFrequency, Condition) 

s2_cleaned_data |> summarize_exploded_columns("AIChatbotsUsed", AIChatbotsUsed)
  
s2_cleaned_data |> summarize_exploded_columns("AIChatbotsUsed", AIChatbotsUsed, Condition)

```

#### Science Content Familiarity

```{r}

s2_cleaned_data |> 
  summarize_columns(ScienceContent) 

s2_cleaned_data |> 
  summarize_columns(ScienceContent, Condition) 

s2_cleaned_data |> 
  summarize_columns(ScienceContent_regrouped) 

s2_cleaned_data |> 
  summarize_columns(ScienceContent_regrouped, Condition) 

```

#### Expertise

```{r}

s2_cleaned_data |> 
  summarize_columns(intention_to_use_score) 

s2_cleaned_data |> 
  summarize_columns(intention_to_use_score, Condition) 

s2_cleaned_data |> 
  summarize_columns(fear_of_ai_score) 

s2_cleaned_data |> 
  summarize_columns(fear_of_ai_score, Condition) 

s2_cleaned_data |> 
  summarize_columns(professional_content_expertise)

s2_cleaned_data |> 
  summarize_columns(professional_content_expertise, Condition) 

# changed opinion of AI
s2_cleaned_data |> 
  summarize_columns(Experience_4) 

s2_cleaned_data |> 
  summarize_columns(Experience_4, Condition) 


s2_cleaned_data |> 
  summarize_columns(Experience_7) 

s2_cleaned_data |> 
  summarize_columns(Experience_7, Condition) 


```

### Manipulation Check

#### Chat Analysis

```{r}
# process_chatlogs(s2_cleaned_data)
```

```{r}

```

#### Anthropomorphism

We attempted to explicitly manipulated the level of anthropomorphism. Therefore, we would expect to see a significant difference in this score across the 3 conditions.

##### Plot

```{r}

violin_plot(s2_cleaned_data, 
            "s2",
            "Condition",
            "anthropomorphism_score",
            include_legend = FALSE)

```

##### Descriptive Statistics

```{r}
s2_cleaned_data |> descriptives_by_group(Condition, anthropomorphism_score) 
```


##### Inferential Statistics

```{r}
# 
# aov_model <- aov(anthropomorphism_score ~ Condition, data = s2_cleaned_data)
# 
# par(mfrow = c(2, 2))
# plot(aov_model)
# 
# summary(aov_model)


```

###### T-tests

```{r}

# t_high_low = t.test(
#   x = s2_cleaned_data |> filter(Condition == "High") |> select(anthropomorphism_score),
#   y = s2_cleaned_data |> filter(Condition == "Low") |> select(anthropomorphism_score)
# )
# 
# t_high_low

```
```{r}

# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::t_test(data = s2_cleaned_data, formula = anthropomorphism_score ~ Condition, detailed = TRUE, paired = FALSE)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
})

result

```


```{r}
# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::cohens_d(data = s2_cleaned_data, formula = anthropomorphism_score ~ Condition)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

result
```

```{r}
violin_plot(data = s2_cleaned_data, 
            x = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            y = s2_cleaned_data$anthropomorphism_score, 
            group = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            title = "Anthropomorphism Scores by AI Usage Frequency", 
            legend_label = "AI Usage Frequency", 
            y_label = "Anthropomorphism Score", x_label = "AI Usage Frequency")

```


##### Check for interaction with usage
```{r}

frequency_comparisons <- list(  c("rarely", "occasionally"),
    c("rarely", "frequently"),
    c("occasionally", "frequently") )

# condition_comparisons <- list(  c("High", "Medium"),
#     c("High", "Low"),
#     c("Medium", "Low") )

# Global test
compare_means(anthropomorphism_score ~ AIChatbotsFrequency_regrouped,  data = s2_cleaned_data, method = "anova")

compare_means(anthropomorphism_score ~ AIChatbotsFrequency_regrouped, comparisons = frequency_comparisons, data = s2_cleaned_data,  method = "t.test")


ggboxplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "anthropomorphism_score",
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal)+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")        +     # Add global p-value
  ggtitle("Mean Anthropomorphism by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Anthropomorphism", fill = "Frequency of Use")
  

ggbarplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "anthropomorphism_score",
          add = "mean_sd",        
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")      +     # Add global p-value
  ggtitle("Mean Anthropomorphism by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Anthropomorphism", fill = "Frequency of Use")
  

violin_plot(s2_cleaned_data, s2_cleaned_data$Condition, s2_cleaned_data$anthropomorphism_score, s2_cleaned_data$Condition, "Anthropomorphism Scores") +
  facet_wrap(~AIChatbotsFrequency_regrouped)



```

```{r}

library(apa)
library(effectsize)
library(rstatix)
aov_model <- aov(anthropomorphism_score ~ Condition * AIChatbotsFrequency_regrouped, data = s2_cleaned_data)
model_summ <- summary(aov_model)
anova_apa(aov_model)

model_summ


```

#### Likeability

We were not explicitly intending to manipulate likeability

##### Plot

```{r}
violin_plot(s2_cleaned_data, s2_cleaned_data$Condition, s2_cleaned_data$likeability_score, s2_cleaned_data$Condition, "Likeability Scores")
```

##### Descriptive Statistics

###### Means

```{r}
s2_cleaned_data |>
  select(Condition, likeability_score) |>
by(s2_cleaned_data$Condition, summary)

```

###### Standard Deviation

```{r}
tapply(s2_cleaned_data$likeability_score, s2_cleaned_data$Condition, sd)
```

###### Variance

```{r}
tapply(s2_cleaned_data$likeability_score, s2_cleaned_data$Condition, var)
```

##### Inferential Statistics


###### T-tests

```{r}

# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::t_test(data = s2_cleaned_data, formula = likability_score ~ Condition, detailed = TRUE, paired = FALSE)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
})

result

```


```{r}
# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::cohens_d(data = s2_cleaned_data, formula = likeability ~ Condition)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

result
```


#### Competence

We were not explicitly intending to manipulate competence

##### Plot

```{r}
violin_plot(s2_cleaned_data, s2_cleaned_data$Condition, s2_cleaned_data$competence_score, s2_cleaned_data$Condition, "Competence Scores")
```

##### Descriptive Statistics

###### Means

```{r}
s2_cleaned_data |>
  select(Condition, competence_score) |>
by(s2_cleaned_data$Condition, summary)

```

###### Standard Deviation

```{r}
tapply(s2_cleaned_data$competence_score, s2_cleaned_data$Condition, sd)
```

###### Variance

```{r}
tapply(s2_cleaned_data$competence_score, s2_cleaned_data$Condition, var)
```

##### Inferential Statistics


###### T-tests

```{r}

# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::t_test(data = s2_cleaned_data, formula = competence_score ~ Condition, detailed = TRUE, paired = FALSE)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
})

result

```


```{r}
# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::cohens_d(data = s2_cleaned_data, formula = competence_score ~ Condition)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

result
```


### Main Analysis

#### Content Trust

##### Plot

```{r}
plot <- violin_plot(s2_cleaned_data, s2_cleaned_data$Condition, s2_cleaned_data$content_trust_combined_score, s2_cleaned_data$Condition, "Content Trust Scores", 
                        x_label = "Anthropomorphism Condition", y_label = "Content Trust Score", comparisons = anthropomorphism_comparisons)


ggsave("plots/s2/content_anthropomorphism_distribution.png", plot = plot, create.dir = TRUE)

plot
```

##### Descriptive Statistics

```{r}
s2_cleaned_data |>
  select(Condition, content_trust_combined_score) |>
by(s2_cleaned_data$Condition, summary)

```

###### Standard Deviation

```{r}
tapply(s2_cleaned_data$content_trust_combined_score, s2_cleaned_data$Condition, sd)
```

###### Variance

```{r}
tapply(s2_cleaned_data$content_trust_combined_score, s2_cleaned_data$Condition, var)
```

##### Inferential Statistics


```{r}

# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::t_test(data = s2_cleaned_data, formula = content_trust_combined_score ~ Condition, detailed = TRUE, paired = FALSE)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
})

result

```


```{r}
# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::cohens_d(data = s2_cleaned_data, formula = content_trust_combined_score ~ Condition)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

result
```



##### Post-hoc Analysis

###### Anthropomorphism

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ anthropomorphism_score , data = s2_cleaned_data)


df <- s2_cleaned_data |>
  select(content_trust_combined_score, anthropomorphism_score)

cor(df)
corrplot(cor(df),
         method = "number",
  sig.level = 0.05,
  type = "upper", # show only upper side
)

# 
# cat_plot(fit_i, pred = Condition, modx = age_range,  geom = "bar", colors = safe_pal)

```

```{r}

cor_result <- cor.test(s2_cleaned_data$anthropomorphism_score, s2_cleaned_data$content_trust_combined_score, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)


plot <- s2_cleaned_data |>
  ggplot(aes(x = anthropomorphism_score, y = content_trust_combined_score)) +
    labs(x="Anthropomorphism Score", y = "Content Trust Score")  +
  geom_point(col = "#196389", size = 0.5) +
        stat_smooth(method = "lm", formula = "y ~ x",
        col = "#7F2543", se = FALSE, size = 1)


ggsave("plots/s2/content_anthropomorphism_correlation.png", plot = plot, create.dir = TRUE)

plot
```


###### Author / Content Trust Interaction

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$content_trust_combined_score, method = "pearson")

apa::cor_apa(cor_result, r_ci = TRUE)


plot <- s2_cleaned_data |>
  ggplot(aes(x = author_trust_combined_score, y = content_trust_combined_score)) +
  labs(x="Author Trust Score", y = "Content Trust Score")  +
  geom_point(col = "#196389", size = 0.5) +
        stat_smooth(method = "lm", formula = "y ~ x",
        col = "#7F2543", se = FALSE, size = 1)

ggsave("plots/s2/content_author_correlation.png", plot = plot, create.dir = TRUE)

plot
```


```{r}

lm_model <- lm(content_trust_combined_score ~ author_trust_combined_score * anthropomorphism_score , data = s2_cleaned_data)
summary(lm_model)

interactions::sim_slopes(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score) 

plot <- interact_plot(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score,  
              x.label = "Author Trust Score",
              y.label = "Content Trust Score",
              legend.main = "Anthropomorphism Score",
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.5, geom="bar", 
              # linearity.check = TRUE,
              rug = TRUE,
              rug.sides = "bl",
              colors = safe_pal) +
  # labs(x="Anthropomorphism Score", y = "Content Trust Score", legend = "Author Trust Score")  +
  theme(legend.position = "top")

ggsave("plots/s2/content_anthropomorphism_author_interaction.png", plot = plot, create.dir = TRUE)

plot



```

```{r}

lm_model <- lm(content_trust_combined_score ~ author_trust_combined_score * anthropomorphism_score * AIChatbotsFrequency_regrouped, data = s2_cleaned_data)
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score,
              mod2 = AIChatbotsFrequency_regrouped,
              x.label = "Author Trust Score",
              y.label = "Content Trust Score",
              legend.main = "Anthropomorphism Score",
              mod2.values = c("frequently", "occasionally", "rarely"),
              mod2.labels = c("frequently", "occasionally", "rarely"),
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  # labs(x="Anthropomorphism Score", y = "Content Trust Score", legend = "Author Trust Score")  +
  theme(legend.position = "top")

ggsave("plots/s2/content_anthropomorphism_author_frequency_interaction.png", plot = plot, create.dir = TRUE)

plot


```

```{r}

lm_model <- lm(content_trust_combined_score ~ author_trust_combined_score * anthropomorphism_score, data = s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "frequently"))
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score,
              x.label = "Author Trust Score",
              y.label = "Content Trust Score",
              legend.main = "Anthropomorphism Score",
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  # labs(x="Anthropomorphism Score", y = "Content Trust Score", legend = "Author Trust Score")  +
  theme(legend.position = "top")

ggsave("plots/s2/content_anthropomorphism_author_frequently_interaction.png", plot = plot, create.dir = TRUE)

plot


```
```{r}

lm_model <- lm(content_trust_combined_score ~ author_trust_combined_score * anthropomorphism_score, data = s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "occasionally"))
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score,
              x.label = "Author Trust Score",
              y.label = "Content Trust Score",
              legend.main = "Anthropomorphism Score",
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  # labs(x="Anthropomorphism Score", y = "Content Trust Score", legend = "Author Trust Score")  +
  theme(legend.position = "top")

ggsave("plots/s2/content_anthropomorphism_author_occasionally_interaction.png", plot = plot, create.dir = TRUE)

plot


```

```{r}

lm_model <- lm(content_trust_combined_score ~ author_trust_combined_score * anthropomorphism_score, data = s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "rarely"))
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = author_trust_combined_score, 
              modx = anthropomorphism_score,
              x.label = "Author Trust Score",
              y.label = "Content Trust Score",
              legend.main = "Anthropomorphism Score",
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  # labs(x="Anthropomorphism Score", y = "Content Trust Score", legend = "Author Trust Score")  +
  theme(legend.position = "top")

ggsave("plots/s2/content_anthropomorphism_author_rarely_interaction.png", plot = plot, create.dir = TRUE)

plot


```

```{r}

lm_model <- lm(content_trust_combined_score ~ anthropomorphism_score * AIChatbotsFrequency_regrouped, data = s2_cleaned_data)
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = anthropomorphism_score, 
              modx = AIChatbotsFrequency_regrouped,
              x.label ="Anthropomorphism Score",
              y.label = "Content Trust Score",
              legend.main = "Frequency",
              # mod2.values = c("frequently", "occasionally", "rarely"),
              # mod2.labels = c("frequently", "occasionally", "rarely"),
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  theme(legend.position = "right")

ggsave("plots/s2/content_anthropomorphism_frequency_interaction.png", plot = plot, create.dir = TRUE)

plot

```

```{r}
# data <- s2_cleaned_data %>%
#   mutate(author_group = cut(author_trust_combined_score,
#                             breaks = quantile(author_trust_combined_score, 
#                                               probs = c(0, 0.33, 0.66, 1),
#                                               na.rm = TRUE),
#                             include.lowest = TRUE,
#                             labels = c("Low", "Medium", "High")
#   ))
# 
# # Check the distribution of the new categorical variable
# table(data$author_group)
# 
# # Run the ANOVA with the interaction between Condition and author_group
# anova_model <- aov(content_trust_combined_score ~ Condition * author_group, data = data)
# summary(anova_model)
```


```{r}

data <- s2_cleaned_data |> group_by(Condition) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Condition * author_trust_combined_score
x <- s2_cleaned_data$author_trust_combined_score
x_label <- "Author Trust"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}


###### Age

```{r}

data <- s2_cleaned_data |> group_by(age_range) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ age_range
x <- s2_cleaned_data$age_range
x_label <- "Age range"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Age / Condition Interaction

```{r}

# 
fit_i <- linear_regression(content_trust_combined_score ~ Condition * age_range, data = s2_cleaned_data)

result <- tryCatch({
  # Code produces error
  cat_plot(fit_i, pred = Condition, modx = age_range,  geom = "bar", colors = safe_pal)

}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})


```

Significant interaction between for age range 50 - 59.7 and 59.7 - 69.3

###### Gender (Man / Woman only)

```{r}

data <- s2_cleaned_data |> group_by(Gender) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Gender
x <- s2_cleaned_data$Gender
x_label <- "Gender"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Gender / Condition Interaction

```{r}

result <- tryCatch({
  # Code produces error
  

}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Gender, 
                    data = s2_cleaned_data |> filter(Gender == "Man" | Gender == "Woman"))

cat_plot(fit_i, pred = Condition, modx = Gender,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="line", colors = safe_pal)

```

###### Sex (Male / Female only)

```{r}

data <- s2_cleaned_data |> group_by(Sex) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Sex
x <- s2_cleaned_data$Sex
x_label <- "Sex"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Sex / Condition Interaction

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * Sex, 
                    data = s2_cleaned_data |> filter(Sex == "Male" | Sex == "Female"))

cat_plot(fit_i, pred = Condition, modx = Sex,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="line", colors = safe_pal)
```

###### Education

```{r}

data <- s2_cleaned_data |> group_by(Education) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Education
x <- s2_cleaned_data$Education
x_label <- "Education"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(Education_regrouped) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Education_regrouped
x <- s2_cleaned_data$Education_regrouped
x_label <- "Education"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Education / Condition Interaction

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * Education, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Education,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

fit_i <- lm(content_trust_combined_score ~ Condition * Education_regrouped,
                    data = s2_cleaned_data)

summ(fit_i)

cat_plot(fit_i, pred = Condition, modx = Education_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### AI Usage Experience

```{r}
violin_plot(data = s2_cleaned_data, 
            x = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            y = s2_cleaned_data$content_trust_combined_score, 
            group = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            title = "Content Trust Scores by AI Usage Frequency", 
            legend_label = "AI Usage Frequency", 
            y_label = "Content Trust Score", x_label = "AI Usage Frequency")
```

```{r}
#| label: frequency

frequency_comparisons <- list(  c("rarely", "occasionally"),
    c("rarely", "frequently"),
    c("occasionally", "frequently") )

condition_comparisons <- list(
    c("High", "Low") )

# Global test
compare_means(content_trust_combined_score ~ AIChatbotsFrequency_regrouped,  data = s2_cleaned_data, method = "anova")

compare_means(content_trust_combined_score ~ AIChatbotsFrequency_regrouped, comparisons = frequency_comparisons, data = s2_cleaned_data,  method = "t.test")


ggboxplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "content_trust_combined_score",
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal)+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")        +     # Add global p-value
  ggtitle("Mean Content Trust by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Content Trust", fill = "Frequency of Use")
  

ggbarplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "content_trust_combined_score",
          add = "mean_sd",        
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")      +     # Add global p-value
  ggtitle("Mean Content Trust by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Content Trust", fill = "Frequency of Use")
  

ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "frequently"), x = "Condition", y = "content_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova")  +     # Add global p-value
  ggtitle("Mean Content Trust by Condition for Frequent Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Content Trust", fill = "Antropomorphism Condition")
  

ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "occasionally"), x = "Condition", y = "content_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova")  +     # Add global p-value
  ggtitle("Mean Content Trust by Condition for Occassional Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Content Trust", fill = "Antropomorphism Condition")
  
ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "rarely"), x = "Condition", y = "content_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova") +     # Add global p-value
  ggtitle("Mean Content Trust by Condition for Rare Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Content Trust", fill = "Antropomorphism Condition")
  
```

```{r}

data <- s2_cleaned_data |> group_by(AIChatbotsFrequency_regrouped) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ AIChatbotsFrequency_regrouped
x <- s2_cleaned_data$AIChatbotsFrequency_regrouped
x_label <- "AI Usage Frequency"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * AIChatbotsFrequency, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = AIChatbotsFrequency,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)




fit_i <- linear_regression(content_trust_combined_score ~ Condition * AIChatbotsFrequency_regrouped, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = AIChatbotsFrequency_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### Science Content Experience

```{r}

data <- s2_cleaned_data |> group_by(ScienceContent) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ ScienceContent
x <- s2_cleaned_data$ScienceContent
x_label <- "Science Content Consumption Frequency"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(ScienceContent_regrouped) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ ScienceContent_regrouped
x <- s2_cleaned_data$ScienceContent_regrouped
x_label <- "Science Content Consumption Frequency"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * ScienceContent, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = ScienceContent,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)



fit_i <- linear_regression(content_trust_combined_score ~ Condition * ScienceContent_regrouped, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = ScienceContent_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### Intention to Use AI

```{r}
data <- s2_cleaned_data |> group_by(intention_to_use_score) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ intention_to_use_score
x <- s2_cleaned_data$intention_to_use_score
x_label <- "Intention to Use AI"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * intention_to_use_score, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = intention_to_use_score,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Changed Opinion

```{r}
data <- s2_cleaned_data |> group_by(Experience_4) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Experience_4
x <- s2_cleaned_data$Experience_4
x_label <- "Study Changed Opinion of AI"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Experience_4, 
                    data = s2_cleaned_data)
cat_plot(fit_i, pred = Condition, modx = Experience_4,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Fear of AI

```{r}
data <- s2_cleaned_data |> group_by(fear_of_ai_score) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ fear_of_ai_score
x <- s2_cleaned_data$fear_of_ai_score
x_label <- "Fear of AI"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * fear_of_ai_score, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = fear_of_ai_score,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Could Write

```{r}
data <- s2_cleaned_data |> group_by(Experience_7) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Experience_7
x <- s2_cleaned_data$Experience_7
x_label <- "Belief could write content"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Experience_7, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = Experience_7,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Professional Content / Writing Expertise

```{r}
data <- s2_cleaned_data |> group_by(professional_content_expertise) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ professional_content_expertise
x <- s2_cleaned_data$professional_content_expertise
x_label <- "Professional Experience with Content or Writing"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * professional_content_expertise, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = professional_content_expertise,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Content Properties

Well-written

```{r}
data <- s2_cleaned_data |> group_by(Appelman_4) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Appelman_4
x <- s2_cleaned_data$Appelman_4
x_label <- "Well-written"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Appelman_4, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = Appelman_4,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

Boring

```{r}
data <- s2_cleaned_data |> group_by(Appelman_5) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Appelman_5
x <- s2_cleaned_data$Appelman_5
x_label <- "Boring"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Appelman_5, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Appelman_5,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

Engaging

```{r}
data <- s2_cleaned_data |> group_by(Appelman_6) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Appelman_6
x <- s2_cleaned_data$Appelman_6
x_label <- "Engaging"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * Appelman_6, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = Appelman_6,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Survey Purpose Check

```{r}

data <- s2_cleaned_data |> group_by(SurveyTopicCheck_coded) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ SurveyTopicCheck_coded
x <- s2_cleaned_data$SurveyTopicCheck_coded
x_label <- "Perceived Survey Purpose"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Survey Purpose / Condition Interaction

```{r}

fit_i <- linear_regression(content_trust_combined_score ~ Condition * SurveyTopicCheck_coded,
                    data = s2_cleaned_data)

result <- tryCatch({
  # Code produces error
  cat_plot(fit_i, pred = Condition, modx = SurveyTopicCheck_coded,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})


```

###### Unrealistic Check

```{r}

data <- s2_cleaned_data |> group_by(Unrealistic) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Unrealistic
x <- s2_cleaned_data$Unrealistic
x_label <- "Perceived Unrealistic"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(Unrealistic_coded) |> filter(n() > 3) |> ungroup()
formula <- content_trust_combined_score ~ Unrealistic_coded
x <- s2_cleaned_data$Unrealistic_coded
x_label <- "Perceived Unrealistic Reason"
y <- s2_cleaned_data$content_trust_combined_score
y_label <- "Content Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Unrealistic / Condition Interaction

```{r}


fit_i <- linear_regression(content_trust_combined_score ~ Condition * Unrealistic,
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Unrealistic,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)


fit_i <- linear_regression(content_trust_combined_score ~ Condition * Unrealistic_coded,
                    data = s2_cleaned_data |> filter(Unrealistic == "Yes"))

result <- tryCatch({
  # Code produces error


cat_plot(fit_i, pred = Condition, modx = Unrealistic_coded,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", , colors = safe_pal)

}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})
```

#### Author Trust

##### Plot

```{r}
plot <- violin_plot(s2_cleaned_data, s2_cleaned_data$Condition, s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Condition, "Author Trust Scores", 
                        x_label = "Anthropomorphism Condition", y_label = "Author Trust Score", comparisons = anthropomorphism_comparisons)

ggsave("plots/s2/author_anthropomorphism_distribution.png", plot = plot, create.dir = TRUE)

plot
```

##### Descriptive Statistics

```{r}
s2_cleaned_data |>
  select(Condition, author_trust_combined_score) |>
by(s2_cleaned_data$Condition, summary)

```

###### Standard Deviation

```{r}
tapply(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Condition, sd)
```

###### Variance

```{r}
tapply(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Condition, var)
```

##### Inferential Statistics


```{r}

# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::t_test(data = s2_cleaned_data, formula = author_trust_combined_score ~ Condition, detailed = TRUE, paired = FALSE)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
})

result

```




```{r}
# Error handling using tryCatch
result <- tryCatch({
  # Code produces error
  rstatix::cohens_d(data = s2_cleaned_data, formula = author_trust_combined_score ~ Condition)
}, error = function(e) {
  # Handle the error
  cat("An error occurred:", e$message, "\n")
  return(NA)
})

result
```

##### Post-hoc Analysis

###### Anthropomorphism

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ anthropomorphism_score , data = s2_cleaned_data)


```

```{r}

cor_result <- cor.test(s2_cleaned_data$anthropomorphism_score, s2_cleaned_data$author_trust_combined_score, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

```

```{r}
df <- s2_cleaned_data |>
  select(content_trust_combined_score, author_trust_combined_score, anthropomorphism_score)

```

```{r}
cor(df)
corrplot(cor(df),
         method = "number",
  sig.level = 0.05,
  type = "upper", # show only upper side
)

# 
# cat_plot(fit_i, pred = Condition, modx = age_range,  geom = "bar", colors = safe_pal)

```

```{r}
plot <- s2_cleaned_data |>
  ggplot(aes(x = anthropomorphism_score, y = author_trust_combined_score)) +
  labs(x="Anthropomorphism Score", y = "Author Trust Score")  +
  geom_point(col = "#196389", size = 0.5) +
        stat_smooth(method = "lm", formula = "y ~ x",
        col = "#7F2543", se = FALSE, size = 1
)

ggsave("plots/s2/author_anthropomorphism_correlation.png", plot = plot, create.dir = TRUE)

plot
```


###### Anthro / Author Trust Interaction


```{r}
# Step 1: Fit the mediator model
mediator_model <- lm(anthropomorphism_score ~ author_trust_combined_score, data = s2_cleaned_data)

# Step 2: Fit the outcome model (including the mediator)
outcome_model <- lm(content_trust_combined_score ~ author_trust_combined_score + anthropomorphism_score, data = s2_cleaned_data)

# Step 3: Run the mediation analysis
library(mediation)
mediation_result <- mediate(mediator_model, outcome_model, 
                            treat = "author_trust_combined_score", 
                            mediator = "anthropomorphism_score",
                            boot = TRUE, sims = 5000)  # Bootstrapping for CI

# Step 4: Summary of results
summary(mediation_result)
```

```{r}
library(lavaan)

model <- '
  # Mutual paths
  anthropomorphism_score ~ author_trust_combined_score
  author_trust_combined_score ~ anthropomorphism_score
'

fit <- sem(model, data = s2_cleaned_data)
summary(fit, standardized = TRUE)
```
```{r}
# Mediation model
library(mediation)

# Mediator model
med_model <- lm(author_trust_combined_score ~ Condition, data = s2_cleaned_data)

# Outcome model
outcome_model <- lm(content_trust_combined_score ~ Condition + author_trust_combined_score, data = s2_cleaned_data)

# Mediation analysis
mediation_result <- mediate(med_model, outcome_model,
                            treat = "Condition",
                            mediator = "author_trust_combined_score",
                            boot = TRUE, sims = 5000)

summary(mediation_result)
```
```{r}
library(lavaan)

s2_cleaned_data$interaction_term <- s2_cleaned_data$author_trust_combined_score * s2_cleaned_data$anthropomorphism_score


modmed_model <- '
  # First stage: Condition → Author Trust
  author_trust_combined_score ~ a1*Condition

  # Second stage: Content Trust ~ Author Trust + Moderator + Interaction
  content_trust_combined_score ~ b1*author_trust_combined_score + b2*anthropomorphism_score + b3*interaction_term

  # Indirect effect (not moderated)
  indirect := a1 * b1

  # Conditional indirect effect when moderator is low (-1 SD) and high (+1 SD)
  ind_low := a1 * (b1 + b3 * -1)
  ind_high := a1 * (b1 + b3 * 1)
'

fit <- sem(modmed_model, data = s2_cleaned_data, se = "bootstrap", bootstrap = 5000)
summary(fit, standardized = TRUE)

```

```{r}
library(semPlot)

# # After fitting a lavaan model:
# semPaths(fit, 
#          what = "std",             # show standardized coefficients
#          layout = "circle",        # or "tree", "spring", "circle2"
#          edge.label.cex = 1.2,     # size of path labels
#          nCharNodes = 0,           # don't shorten node names
#          sizeMan = 8,              # node size
#          residuals = FALSE,        # hide residual variances
#          title = FALSE)

semPaths(
  object = fit,              # your lavaan model object
  what = "std",              # show standardized coefficients
  layout = "tree",           # "tree", "circle", "spring", etc.
  edge.label.cex = 1.2,      # size of edge (path) labels
  sizeMan = 8,               # size of variable boxes
  sizeLat = 0,               # hide latent variable nodes (you have none)
  residuals = FALSE,         # don't show residual variances
  nCharNodes = 0,            # show full variable names
  title = FALSE
)

```


```{r}

lm_model <- lm(author_trust_combined_score ~ anthropomorphism_score * content_trust_combined_score, data = s2_cleaned_data)
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = anthropomorphism_score, 
              modx = content_trust_combined_score,  
              x.label ="Anthropomorphism Score",
              y.label = "Author Trust Score",
              legend.main = "Content Trust Score",
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  theme(legend.position = "right")

ggsave("plots/s2/author_anthropomorphism_content_interaction.png", plot = plot, create.dir = TRUE)

plot

```

```{r}

lm_model <- lm(author_trust_combined_score ~ anthropomorphism_score * content_trust_combined_score * AIChatbotsFrequency_regrouped, data = s2_cleaned_data)
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = anthropomorphism_score, 
              modx = content_trust_combined_score,
              mod2 = AIChatbotsFrequency_regrouped,
              x.label ="Anthropomorphism Score",
              y.label = "Author Trust Score",
              legend.main = "Content Trust Score",
              mod2.values = c("frequently", "occasionally", "rarely"),
              mod2.labels = c("frequently", "occasionally", "rarely"),
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  theme(legend.position = "right")

ggsave("plots/s2/author_anthropomorphism_content_frequency_interaction.png", plot = plot, create.dir = TRUE)

plot

```
```{r}

lm_model <- lm(author_trust_combined_score ~ anthropomorphism_score * AIChatbotsFrequency_regrouped, data = s2_cleaned_data)
summary(lm_model)

plot <- interact_plot(lm_model, 
              pred = anthropomorphism_score, 
              modx = AIChatbotsFrequency_regrouped,
              x.label ="Anthropomorphism Score",
              y.label = "Author Trust Score",
              legend.main = "Frequency",
              # mod2.values = c("frequently", "occasionally", "rarely"),
              # mod2.labels = c("frequently", "occasionally", "rarely"),
              plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", 
              colors = safe_pal) +
  theme(legend.position = "right")

ggsave("plots/s2/author_anthropomorphism_frequency_interaction.png", plot = plot, create.dir = TRUE)

plot

```

###### Age

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Age_1, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = Age_1, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}

data <- s2_cleaned_data |> group_by(age_range) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ age_range
x <- s2_cleaned_data$age_range
x_label <- "Age range"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

{{< include "_Kruskal.qmd" >}}

###### Age / Condition Interaction

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * age_range, data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = age_range,  geom = "bar", colors = safe_pal)
```

###### Gender (Man / Woman only)

```{r}

data <- s2_cleaned_data |> group_by(Gender) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Gender
x <- s2_cleaned_data$Gender
x_label <- "Gender"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

{{< include "_Kruskal.qmd" >}}

###### Gender / Condition Interaction

```{r}


fit_i <- linear_regression(formula = author_trust_combined_score ~ Condition * Gender, 
                  data = s2_cleaned_data |> filter(Gender == "Man" | Gender == "Woman"))


cat_plot(fit_i, pred = Condition, modx = Gender,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="line", colors = safe_pal)

```

###### Sex (Male / Female only)

```{r}

data <- s2_cleaned_data |> group_by(Sex) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Sex
x <- s2_cleaned_data$Sex
x_label <- "Sex"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Sex / Condition Interaction

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Sex, 
                    data = s2_cleaned_data |> filter(Sex == "Male" | Sex == "Female"))

summ(fit_i)

cat_plot(fit_i, pred = Condition, modx = Sex,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="line", colors = safe_pal)
```

###### Education

```{r}

data <- s2_cleaned_data |> group_by(Education) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Education
x <- s2_cleaned_data$Education
x_label <- "Education"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(Education_regrouped) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Education_regrouped
x <- s2_cleaned_data$Education_regrouped
x_label <- "Education"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

###### Education / Condition Interaction

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Education, 
                    data = s2_cleaned_data)

summ(fit_i)

cat_plot(fit_i, pred = Condition, modx = Education,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

fit_i <- lm(author_trust_combined_score ~ Condition * Education_regrouped,
                    data = s2_cleaned_data)

summ(fit_i)

cat_plot(fit_i, pred = Condition, modx = Education_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### AI Usage Experience

```{r}
violin_plot(data = s2_cleaned_data, 
            x = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            y = s2_cleaned_data$author_trust_combined_score, 
            group = s2_cleaned_data$AIChatbotsFrequency_regrouped, 
            title = "Author Trust Scores by AI Usage Frequency", 
            legend_label = "AI Usage Frequency", 
            y_label = "Author Trust Score", x_label = "AI Usage Frequency")
```

```{r}

frequency_comparisons <- list(  c("rarely", "occasionally"),
    c("rarely", "frequently"),
    c("occasionally", "frequently") )

condition_comparisons <- list( 
    c("High", "Low") )

# Global test
compare_means(author_trust_combined_score ~ AIChatbotsFrequency_regrouped,  data = s2_cleaned_data, method = "anova")

compare_means(author_trust_combined_score ~ AIChatbotsFrequency_regrouped, comparisons = frequency_comparisons, data = s2_cleaned_data,  method = "t.test")


ggboxplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "author_trust_combined_score",
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal)+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")        +     # Add global p-value
  ggtitle("Mean Author Trust by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Author Trust", fill = "Frequency of Use")
  

ggbarplot(s2_cleaned_data, x = "AIChatbotsFrequency_regrouped", y = "author_trust_combined_score",
          add = "mean_sd",        
          color = "AIChatbotsFrequency_regrouped", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = frequency_comparisons, method = "t.test", label = "p.signif") + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 12, method = "anova")      +     # Add global p-value
  ggtitle("Mean Author Trust by Frequency of AI Chatbot Use") + 
    labs(x="Frequency of Use", y = "Author Trust", fill = "Frequency of Use")
  

ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "frequently"), x = "Condition", y = "author_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova")  +     # Add global p-value
  ggtitle("Mean Author Trust by Condition for Frequent Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Author Trust", fill = "Antropomorphism Condition")
  

ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "occasionally"), x = "Condition", y = "author_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova")  +     # Add global p-value
  ggtitle("Mean Author Trust by Condition for Occassional Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Author Trust", fill = "Antropomorphism Condition")
  
ggbarplot(s2_cleaned_data |> filter(AIChatbotsFrequency_regrouped == "rarely"), x = "Condition", y = "author_trust_combined_score",
          add = "mean_sd",        
          color = "Condition", palette = safe_pal, position = position_dodge(0.8))+ 
  stat_compare_means(comparisons = condition_comparisons, method = "t.test", label = "p.signif") +
  stat_compare_means(label.y = 12, method = "anova") +     # Add global p-value
  ggtitle("Mean Author Trust by Condition for Rare Users of AI Chatbots") + 
    labs(x="Antropomorphism Condition", y = "Author Trust", fill = "Antropomorphism Condition")
  
```

```{r}

data <- s2_cleaned_data |> group_by(AIChatbotsFrequency_regrouped) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ AIChatbotsFrequency_regrouped
x <- s2_cleaned_data$AIChatbotsFrequency_regrouped
x_label <- "AI Usage Frequency"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * AIChatbotsFrequency, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = AIChatbotsFrequency,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * AIChatbotsFrequency_regrouped,
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = AIChatbotsFrequency_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### Science Content Experience

```{r}

data <- s2_cleaned_data |> group_by(ScienceContent) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ ScienceContent
x <- s2_cleaned_data$ScienceContent
x_label <- "Science Content Consumption Frequency"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(ScienceContent_regrouped) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ ScienceContent_regrouped
x <- s2_cleaned_data$ScienceContent_regrouped
x_label <- "Science Content Consumption Frequency"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

# aov_model <- aov(author_trust_combined_score ~ ScienceContent, data = s2_cleaned_data)
# 
# par(mfrow = c(2, 2))
# plot(aov_model)
# 
# summary(aov_model)

fit_i <- linear_regression(author_trust_combined_score ~ Condition * ScienceContent, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = ScienceContent,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

fit_i <- linear_regression(author_trust_combined_score ~ Condition * ScienceContent_regrouped, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = ScienceContent_regrouped,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

```

###### Intention to Use AI

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$intention_to_use_score, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = intention_to_use_score, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}
data <- s2_cleaned_data |> group_by(intention_to_use_score) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ intention_to_use_score
x <- s2_cleaned_data$intention_to_use_score
x_label <- "Intention to Use AI"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * intention_to_use_score, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = intention_to_use_score,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Changed Opinion

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Experience_4, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = Experience_4, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}
data <- s2_cleaned_data |> group_by(Experience_4) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Experience_4
x <- s2_cleaned_data$Experience_4
x_label <- "Study Changed Opinion of AI"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Experience_4, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Experience_4,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Fear of AI

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$fear_of_ai_score, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = fear_of_ai_score, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}
data <- s2_cleaned_data |> group_by(fear_of_ai_score) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ fear_of_ai_score
x <- s2_cleaned_data$fear_of_ai_score
x_label <- "Fear of AI"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * fear_of_ai_score, 
                    data = s2_cleaned_data)

cat_plot(fit_i, pred = Condition, modx = fear_of_ai_score,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Could Write

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, s2_cleaned_data$Experience_7, method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = Experience_7, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}
data <- s2_cleaned_data |> group_by(Experience_7) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Experience_7
x <- s2_cleaned_data$Experience_7
x_label <- "Belief could write content"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Experience_7, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Experience_7,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Professional Content / Writing Expertise

```{r}
data <- s2_cleaned_data |> group_by(professional_content_expertise) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ professional_content_expertise
x <- s2_cleaned_data$professional_content_expertise
x_label <- "Professional Experience with Content or Writing"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"


```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * professional_content_expertise, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = professional_content_expertise,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Content Properties

Well-written

```{r}
cor_result <- cor.test(s2_cleaned_data$author_trust_combined_score, as.numeric(s2_cleaned_data$Appelman_4), method = "pearson")
apa::cor_apa(cor_result, r_ci = TRUE)

s2_cleaned_data |>
  ggplot(aes(x = Appelman_4, y = author_trust_combined_score)) +
  geom_point() +
        stat_smooth(method = "lm",
        col = "#C42126", se = FALSE, size = 1
)
```

```{r}
data <- s2_cleaned_data |> group_by(Appelman_4) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Appelman_4
x <- s2_cleaned_data$Appelman_4
x_label <- "Well-written"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Appelman_4, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Appelman_4,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

Boring

```{r}
data <- s2_cleaned_data |> group_by(Appelman_5) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Appelman_5
x <- s2_cleaned_data$Appelman_5
x_label <- "Boring"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Appelman_5, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Appelman_5,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### 

Engaging

```{r}
data <- s2_cleaned_data |> group_by(Appelman_6) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Appelman_6
x <- s2_cleaned_data$Appelman_6
x_label <- "Engaging"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"
```

{{< include "_ANOVA.qmd" >}}

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Appelman_6, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Appelman_6,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
```

###### Survey Purpose Check

```{r}

data <- s2_cleaned_data |> group_by(SurveyTopicCheck_coded) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ SurveyTopicCheck_coded
x <- s2_cleaned_data$SurveyTopicCheck_coded
x_label <- "Perceived Survey Purpose"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

Survey Purpose / Condition Interaction

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * SurveyTopicCheck_coded,
                    data = s2_cleaned_data)

 result <- tryCatch({
    cat_plot(fit_i, pred = Condition, modx = SurveyTopicCheck_coded,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)
    
  }, error = function(e) {
    # Handle the error
    cat("An error occurred:", e$message, "\n")
    return(NA)
  })
  
 

```

###### Unrealistic Check

```{r}

data <- s2_cleaned_data |> group_by(Unrealistic) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Unrealistic
x <- s2_cleaned_data$Unrealistic
x_label <- "Perceived Unrealistic"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

```{r}

data <- s2_cleaned_data |> group_by(Unrealistic_coded) |> filter(n() > 3) |> ungroup()
formula <- author_trust_combined_score ~ Unrealistic_coded
x <- s2_cleaned_data$Unrealistic_coded
x_label <- "Perceived Unrealistic Reason"
y <- s2_cleaned_data$author_trust_combined_score
y_label <- "Author Trust"

```

{{< include "_ANOVA.qmd" >}}

Survey Purpose / Condition Interaction

```{r}

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Unrealistic, 
                    data = s2_cleaned_data)


cat_plot(fit_i, pred = Condition, modx = Unrealistic,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", colors = safe_pal)

fit_i <- linear_regression(author_trust_combined_score ~ Condition * Unrealistic_coded,
                    data = s2_cleaned_data |> filter(Unrealistic == "Yes"))

cat_plot(fit_i, pred = Condition, modx = Unrealistic_coded,  plot.points = TRUE, jitter = 0.5, point.alpha = 0.25, geom="bar", , colors = safe_pal)
```

#### Correlations

```{r}
correlation_data <- s2_cleaned_data |> select(author_trust_combined_score,
                                           content_trust_combined_score,
                                           likeability_score, 
                                           competence_score, 
                                           expertise_score, 
                                           integrity_score, 
                                           benevolence_score, 
                                           anthropomorphism_score, 
                                           content_trust_appelman_score,
                                           content_trust_behaviour_score,
                                           author_trust_METI_score,
                                           author_trust_behaviour_score)

corr_matrix = cor(correlation_data)

corr_matrix_p <- corr.test(correlation_data)

kable(head(corr_matrix))
corrplot(corr_matrix, type="upper", method = "circle", order = "hclust", 
         addCoef.col = "white", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         p.mat = corr_matrix_p$p, sig.level = 0.01, insig = "blank", 
         diag = FALSE)

```

##### Correlations at High Condition

```{r}
correlation_data_high <- s2_cleaned_data |> 
  filter(Condition == "High") |> 
  select(author_trust_combined_score, content_trust_combined_score, likeability_score, competence_score, expertise_score, integrity_score, benevolence_score)


corr_matrix_high = cor(correlation_data_high)
corr_matrix_p_high <- corr.test(correlation_data_high)

kable(head(corr_matrix_high))
corrplot(corr_matrix_high, type="upper", method = "circle", order = "hclust", 
         addCoef.col = "white", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         p.mat = corr_matrix_p_high$p, sig.level = 0.01, insig = "blank", 
         diag = FALSE)
```

##### Correlations at Low Condition

```{r}
correlation_data_low <- s2_cleaned_data |> 
  filter(Condition == "Low") |> 
  select(author_trust_combined_score, content_trust_combined_score, likeability_score, competence_score, expertise_score, integrity_score, benevolence_score)


corr_matrix_low = cor(correlation_data_low)
corr_matrix_p_low <- corr.test(correlation_data_low)


kable(head(corr_matrix_low))
corrplot(corr_matrix_low, type="upper", method = "circle", order = "hclust", 
         addCoef.col = "white", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         p.mat = corr_matrix_p_low$p, sig.level = 0.01, insig = "blank", 
         diag = FALSE)
```

```{r}
library(cocor)

cocor(~ `content_trust_combined_score` + `expertise_score` | `content_trust_combined_score` + `expertise_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)

```

```{r}
cocor(~ `content_trust_combined_score` + `competence_score` | `content_trust_combined_score` + `competence_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)

```

```{r}
cocor(~ `content_trust_combined_score` + `likeability_score` | `content_trust_combined_score` + `likeability_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)
```

```{r}
cocor(~ `content_trust_combined_score` + `benevolence_score` | `content_trust_combined_score` + `benevolence_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)
```

```{r}
cocor(~ `content_trust_combined_score` + `integrity_score` | `content_trust_combined_score` + `integrity_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)
```

```{r}
cocor(~ `content_trust_combined_score` + `author_trust_combined_score` | `content_trust_combined_score` + `author_trust_combined_score`, 
      data = list(
        as.data.frame(s2_cleaned_data |> filter(Condition == "High")), 
        as.data.frame(s2_cleaned_data |> filter(Condition == "Low"))
      )
)
```

# References

```{r}
citation()
version$version.string

citation("rstatix")
packageVersion("rstatix")

citation("stats")
packageVersion("stats")

citation("effectsize")
packageVersion("effectsize")

citation("psych")
packageVersion("psych")

citation("interactions")
packageVersion("interactions")

citation("corrplot")
packageVersion("corrplot")

citation("performance")
packageVersion("performance")

citation("FSA")
packageVersion("FSA")

citation("see")
packageVersion("see")
```
